{"./":{"url":"./","title":"WeiCot Framework 快速开发教程 ","keywords":"","body":"WeiCot Framework 快速开发教程 -www.weicot.com 简介 WeiCot Framework 是一个高度模块化低耦合可拆分的适用于快速开发的PHP框架此框架自2016/5/23开发完成, 一直处于使用和完善中。我们用它开发了多个项目 如购车商城、站群管理工具、采集工具、供销存系统、OA、定制设计系统、图床、普通商城、ERP、微信小程序后台、微服务系统、分布式系统等。 支持的PHP 版本 php 5.6 - php7 我们分别在 php5.6、php7.1、php7.2、php-7.3 的环境中进行了实际测试，全部通过。 由于php 7以上不在支持 mysql 扩展所以默认使用 Weicot\\Core\\Pdo 类 或 think-orm 进行数据库操作，但为了为兼容特殊情况版本我们保留了 Weicot\\Core\\Database 这种支持mysql 扩展的数据库操作类 当前框架版本 WeiCot Framework Version （框架版本版本号） 2.57 快速入门 服务器环境搭建教程 框架的nginx或Apache规则配置文件 基础配置文件说明 框架的目录结构说明 如何手动创建一个模块以Cms为例 一些Class和Function说明 涉及的开源项目 前端主要使用的开源项目 layui 用于CURD自动生成(非深度绑定 可用 VUE 、ElementUI、Mint UI 组件进行替换 ) layui layui 文档 后端经常使用的ORM think-orm think-orm think-orm 文档 联系我们 邮箱 1050653098@qq.com 博客 weicot.com "},"框架的nginx或Apache规则配置文件.html":{"url":"框架的nginx或Apache规则配置文件.html","title":"框架的nginx或Apache规则配置文件","keywords":"","body":"框架的nginx或Apache规则配置文件(推荐使用Nginx) WeiCot Framework 快速开发教程 -www.weicot.com Nginx 环境配置文件 以lnmp 为例 nginx 下 WeiCot Framework主配置文件 /etc/nginx/WeiCotFramework.conf location / { index index.html index.php; ## Allow a static html file to be shown first try_files $uri $uri/ @handler; ## If missing pass the URI to WeiCot-Framework's front handler expires 30d; ## Assume all files are cachable } ## These locations would be hidden by .htaccess normally location /app/ { deny all; } location /vendor/ { deny all; } location /lib/ { deny all; } location /bin/ { deny all; } location /media/downloadable/ { deny all; } location /pkginfo/ { deny all; } location /report/config.xml { deny all; } location /var/ { deny all; } location /var/export/ { ## Allow admins only to view export folder auth_basic \"Restricted\"; ## Message shown in login window auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword autoindex on; } location /. { ## Disable .htaccess and other hidden files return 404; } location @handler { ## WeiCot Framework uses a common front handler rewrite / /index.php; } location ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler rewrite ^(.*.php)/ $1 last; } lnmp 下 WeiCot Framework 虚拟配置文件位置 /etc/nginx/vhost/wf.conf server { listen 80; #listen [::]:80; server_name wf.weicot.com; index index.html index.htm index.php default.html default.htm default.php; root /home/wwwroot/wf; include WeiCotFramework.conf; #error_page 404 /404.html; include enable-php.conf; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d; } location ~ .*\\.(js|css)?$ { expires 12h; } location ~ /\\. { deny all; } access_log /home/wwwlogs/wf.weicot.log; } Apache 规则配置文件 Options +FollowSymlinks RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L] "},"基础配置文件说明.html":{"url":"基础配置文件说明.html","title":"基础配置文件说明","keywords":"","body":"基础配置文件说明 WeiCot Framework 快速开发教程 -www.weicot.com [ //站点配置 'abbreviation' => '易定制', //简称 'copyright' => '易定制智能供应链服务系统 (易定制) 版本:v' . EDZCV . ' Copyright © 2016-3000 weicot.com 联系我们:1050653098@qq.com', 'logo' => 'skin/frontend/images/logo3.png', //前台logo 'admin_logo' => 'skin/frontend/images/logo6.png', //后台logo 'protocol' => 'http', //协议配置 'site_dir' => '', //网站存放的目录 example/' 'admin_path' => 'admins', //后台管理员类名 'open_registration' => true, //开放注册 'close_site' => false, //关闭站点 'layui_version' => 1545041465480, // 为了更新 js 缓存 'contact_ht' => '1050653098', //服务QQ ], 'theme' => [ //页面所使用的主题 'template_dir' => \"app/code/\", //模板路径默认路径 app/code/前后端分离的路径 skin/frontend/template \"adminhtml\" => \"default\", // 后台主题 adminhtml \"frontend\" => \"default\", // 前台主题 frontend ], 'module' => [ //系统中一些模块配置文件管理 '_disable' => [], //禁用的的模块 '_sql_install' => true, //启用数据库自动安装 'custom' => [ 'design_tools' => true, //默认设计器模块 'default_design_module' => 'Soa', ], ], \"debug\" => [ 'developer_ip' => [], //开发者所在的ip 'display_errors' => true, //显示错误信息 'show_path' => false,//是否 显示Controller地址地址及类名 显示Block地址及类名 显示Template地址及类名 false 'design_tools' => false, //设计工具是否开启 debug ], \"task\" => [ //各种任务执行路径 'run_dir' => '/home/wwwroot/erp', //定时任务运行路径 'work_dir' => '/home/wwwroot/erp', 'local_host' => 'http://127.0.0.1/media/' //本地工作域名 ], \"sync\" => [ // 同步配置 'image' => [ //图片同步服务器 'host' => \"127.0.0.1\", //本地同步服务器 ip 'port' => '2015', //本地同步服务器 host 'sync_domain' => 'http://oss1.amazon.ncaz.com', //同步服务器 host 'default_domain' => 'http://oss1.amazon.ncaz.com', //用户模板中默认的导出域名 ], \"im\" => [] // im 消息同步服务器 ], \"components\" => [ //提供的组件 \"mongoDB\" => [], \"elasticsearch\" => [], \"redis\" => [], \"swoole\" => [], \"database\" => [ // 数据库配制 //pdo persistent 长链接 'pdo_persistent' => true, //pdo 直接输出错误 'show_error' => false, //错误日志文件 'log_file' => './var/log/error_long_name.log', // 数据库类型 'type' => 'mysql', // 数据库连接DSN配置 'dsn' => '', // 服务器地址 'hostname' => '127.0.0.1', // 数据库名 'database' => 'you database ', // 数据库用户名 'username' => 'username', // 数据库密码 'password' => 'password', // 数据库连接端口 'hostport' => '3306', // 数据库连接参数 'params' => [], // 数据库编码默认采用utf8 'charset' => 'utf8', // 数据库表前缀 'prefix' => '', // 数据库调试模式 'debug' => false, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器) 'deploy' => 0, // 数据库读写是否分离 主从式有效 'rw_separate' => false, // 读写分离后 主服务器数量 'master_num' => 1, // 指定从服务器序号 'slave_no' => '', // 是否严格检查字段是否存在 'fields_strict' => true, ] ], \"security\" => [ //安全配置 'no_login' => [], //通过这里配置将会覆该模块的控制器的权限配置 'ip_control' => [ // ip 列表控制 'type' => 'blacklist', // whitelist 'list' => [] ] ] ]; "},"框架的目录结构说明.html":{"url":"框架的目录结构说明.html","title":"框架的目录结构说明","keywords":"","body":"框架的目录结构说明 WeiCot Framework 快速开发教程 -www.weicot.com 框架简介 WeiCot Framework 是一个高度模块化低耦合可拆分的适用于快速开发的PHP框架 目录结构 api: 框架的API接口请求目录(用于存放不同版本的接口处理程序) 外部程序通过这个目录的v2.php (接口版本.php) 转发到相应的控制下,例子 cms.user.list 则会转发到 app/code/Cms/Controller/User.php ->list() cms.list 则会转发到 app/code/Cms/Controller/Api.php ->list() 默认的 Api.php 控制器下面 app: 用来存放框架中的实际应用程序以及配置和加载文件 其中 包含 app/code 应用代码目录 此目录可以不止一个 如 app/erp 支持多种不同类型的程序共用一套框架通过域名区分适用于多站点程序 或者多个不同类型的人程序 以Cms模块为例 Cms 模块代码所在的目录结构 app/code/Cms app/code/Cms/Block app/code/Cms/Controller app/code/Cms/Data app/code/Cms/Model app/code/Cms/View Block 视图以及静态块逻辑所在的目录 完整路径:app/code/Cms/Block Cms/View 中的模板调用的就这个目录的方法,主要存储视图中公用的方法或者html混编的方法等,以及一些html 组件和前端互动组件等. 继承自Weicot\\Core\\Block 里面有自动生成各种html 组件的方法,以及其他通用方法等。 Controller 控制器所在的目录 完整路径:app/code/Cms/Controller 前端的所有访问的url 都将调用相应模块或应用下面的控制器中的方法, 继承自 Weicot\\Core\\Controller 。里面有Controller 常用的方法以及权限控制等 ，里面还有标准的读写查询批量操作以及删除的标准函数名，请按照基类的标准读写查询函数名进行规范书写方便做各种权限控制。 Data 提供数据库安装以及其他操作所在的目录 完整路径:app/code/Cms/Data 提供供数据库安装以及其他操作，这个为数据与Model的中间层 。方便做数据迁移 ，此目录为非必须。 Model 此为存放业务逻辑的目录 完整路径:app/code/Cms/Model 提供一些基础的读写查询方法 可以和 think-php5 的ORM 集成使用 也可以使用自带的Pdo 类 继承自 Weicot\\Coer\\Model; View 完整路径 app/code/Cms/View html模板以xxx.phtml结尾，及其他静态文件。 此目录的文件可以进行迁移 到 skin/frontend/template 目录下面 只要将配置 app/etc/Config.php 文件中的 template dir 改为 skin/frontend/template 然后运行迁移工具即可 ```php 'template' => [ 'dir' => \"app/code/\" //模板路径默认路径 app / code / 前后端分离的路径 skin / frontend / template ], ``` app/etc 用于存放各种配置文件的地方 Config.php 主要配置文件 完整路径 app/etc/Config.php 此配置文件可以通过 __config($key = '', $value = '') 获取 全局有效 注： app\\code\\System\\Model\\Config.php System 模块下的配置文件可以通过 Config::get($key, $default = null) 获取 这个是存储到数据库中的 app/etc/Config.ini 默认为空 [ 自由配置文件 通过 $config = File::getConfig(); 获取] app/etc/Initialization.php 初始化文件 里面有各种初始化信息app\\bootstrap.php 用于加载整个系统的文件 bin： 命令行工具存放目录 lib： 依赖库 依赖库 lib/Core 核心依赖库media 媒体文件 skin 前端样式 skin/frontend 前台样式 skin/frontend/css css 文件 skin/frontend/file 其他文件 skin/frontend/fonts 字体 skin/frontend/images 图片 skin/frontend/js js 文件 skin/frontend/template 用于存放从模块/应用中迁移过来的前端代码以及模板等，用于前后端分离。如果模块默认配置的话，则模块的默认视图路径 app/code/Cms/View/list.phtml 迁移后的路径 skin/frontend/template/Cms/list.phtml skin\\adminhtml 后台样式目录结构与前端样式一样 skin\\package 前端的各种依赖包 skin\\package\\city-picker city-picker 包 skin\\package\\ECharts ECharts包 var 系统产生的临时文件存放目录 如 session cache 等 里面的文件可以删除 但是不会哦影响系统使用vendor 使用 composer命令加载vendor类库composer.json composer 配置文件cron.php cron.php 计划任务task.php 多进程任务index.php 入口程序 "},"如何手动创建一个模块以Cms为例.html":{"url":"如何手动创建一个模块以Cms为例.html","title":"如何手动创建一个模块以Cms为例","keywords":"","body":"如何手动创建一个模块以Cms为例 也支持通过命令行快速自动生成模块并加载以及生成读写查询代码 WeiCot Framework 快速开发教程 -www.weicot.com 基本开发规范 1.命名空间 开头必需大写 namespace Weicot\\Core\\Controller 2.类名开头大写 用驼峰法命名 class BaseExample{} 3.应用/模块开头必需大写 /Core 4.函数 开头小写 public function getPage() 6.以双下划线“”打头的函数或方法作为魔法方法，例如 call 和 __autoload； 7.建议每个模块写出详细的说明文档 日期，作者，功能，返回类型 1.在 composer.json 中新增加一条 \"autoload\": { \"psr-4\": { \"Weicot\\\\Cms\\\\Block\\\\\": \"app/code/Cms/Block\", \"Weicot\\\\Cms\\\\Controller\\\\\": \"app/code/Cms/Controller\", \"Weicot\\\\Cms\\\\Data\\\\\": \"app/code/Cms/Data\", \"Weicot\\\\Cms\\\\Model\\\\\": \"app/code/Cms/Model\", 2.在当前目录下执行 php composer.phar dump-autoload 3.后在 app/code/下创建相应的模块目录结构 app/code/Cms/Block app/code/Cms/Controller app/code/Cms/Data app/code/Cms/Model app/code/Cms/View4.新增加表 1.直接在数据库中新增加 CREATE TABLE `cms` ( id int unsigned auto_increment primary key, user_id int(10) null comment '创建的用户id', title varchar(255) default '' not null comment '标题', description longtext null comment '内容', status tinyint unsigned default 1 not null comment '状态 1显示 2隐藏', created int default 0 not null comment '创建时间', updated int default 0 not null comment '更新时间' ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT 'cms 表'; 2.或者在app/code/Cms/Data 目录下通过创建 Install.php 类新增加 5.在 app/code/Cms/Controller中创建控制器 app\\code\\Cms\\Controller\\Content.php 以上步骤完成后 打开浏览器http://www..com/cms/content你会发现是一个空白页面. 6.下面我们来为其引入前端布局以及页面 1.创建一个空的 Block 以及一个空的模板文件 app\\app\\code\\Cms\\Block\\Common.php 2.模板文件 app\\code\\Cms\\View\\Content\\index.phtml 在模板中添加这一段文字 3.在控制器中引入布局 app\\code\\Cms\\Controller\\Content.php public function index() { /*** * 此方法 支持数据传递 支持添加多个模板 支持添加 js 或 CSS 文件等 */ $this->setView()->addTemplate( array( \"blockName\" => \"Cms.Common\", \"templatePath\" => \"Cms/View/Content/index\", ) )->setLayout()->toHtml(); } 添加完成后 我们可以看到 这个控制器下面的模板文件输出 想要直接显示 block 与模板（template）的引用关系 可以直接 在配置文件( app\\app\\etc\\Config.php)中开启 debug 下的 show_path即可 \"debug\" => [ 'display_errors' => true, //显示错误信息 'show_path' => false,//是否 显示Controller地址地址及类名 显示Block地址及类名 显示Template地址及类名 false 'design_tools' => false, //设计工具是否开启 debug ], 效果如下 7.创建model app\\code\\Cms\\Model\\Content.php \"显示\", 2 => \"隐藏\", ]; } 8.现在我们来创建读写查询页面 1.在模板文件中增加如下内容 usePackageJs(\"layui/common\"); ?> .layui-input-block.options-box-group-child { margin: 0; } layui.use(['element', 'layer'], function () { var element = layui.element; var layer = layui.layer; element.on('collapse(z_search)', function (data) { }); }); 高级筛选 状态 eachSelect(\\Weicot\\Cms\\Model\\Content::$status, 'status', true, 1); ?> 标题 描述 &#xe615; 双击表格可查看具体信息 状态 eachSelect(\\Weicot\\Cms\\Model\\Content::$status, 'status', true, 1); ?> 标题 描述 确认 重置 状态 eachSelect(\\Weicot\\Cms\\Model\\Content::$status, 'status', true, 1); ?> 标题 描述 确认 添加 编辑 删除 var config = { 'version': , }; setJs(\"content\", false, '1596184778'); //将固定数值改为动态的 防止缓存 当然你也可以直接把js 放到当前页面中这样就不用额外的引入js文件了 echo $block->setJs(\"content\", false, time()); ?> 2.并创建相应的js文件 app\\skin\\frontend\\js\\content.js $(function () { layui.config({ version: config.version }); layui.use(['table', 'layer', 'form', 'laypage', 'upload', 'laydate'], function () { var table = layui.table , layer = layui.layer , form = layui.form , laypage = layui.laypage , upload = layui.upload , laydate = layui.laydate; table.render({ elem: '#zq_table' , id: 'tableReload' , url: '/cms/content/page' , toolbar: '#zq_toolbar' , title: '模板' , page: true //开启分页 , limit: 20 // ,totalRow: true //开启合计行 , cols: [[ //表头 {type: 'checkbox', fixed: 'left'} , {field: 'id', title: 'ID', width: 80, sort: true, fixed: 'left', totalRowText: '合计：'} , {field: 'title', width: 100, title: '标题',} , {field: 'description', title: '描述', sort: true, totalRow: true,} , {field: 'status_name', title: '状态', sort: true, totalRow: true,} , {field: 'created', title: '创建时间', sort: true, totalRow: true,} , {field: 'updated', title: '更新时间', sort: true, totalRow: true,} , {fixed: 'right', width: 200, align: 'center', toolbar: '#zq_bar'} ]], parseData: function (res) { return { code: res.status == true ? 0 : 1, msg: res.mesg, count: res.data.count, data: res.data.list } }, }); table.on('toolbar(zq_table)', function (obj) { var checkStatus = table.checkStatus(obj.config.id) , data = checkStatus.data; data = eval(\"(\" + JSON.stringify(data) + \")\"); switch (obj.event) { case 'add': zq_form('添加菜单', '', '700', '700'); $(\"#zq_form\").setForm({id: ''}); form.render(); break; } }); table.on('tool(zq_table)', function (obj) { var data = obj.data , layEvent = obj.event; var tr = obj.tr; switch (layEvent) { case 'del': layer.confirm('您确定删除id：' + data.id + '的数据吗？', function (index) { $.post(\"/cms/content/del\", {id: data.id}, function (ret) { if (ret.status) { layer.msg(ret.msg, {icon: 1, time: 1500}, function () { obj.del(); layer.close(index); }); } else if (ret.status == false) { //删除失败 layer.alert(ret.msg, {icon: 2}, function () { layer.close(index); window.location.reload(); }); } }); }); break; case 'edit': zq_edit_form('编辑菜单', '', 600, 600); $(\"#zq_edit_form\").setForm(data); form.render(); break; } }); table.on('edit(zq_table)', function (obj) { var value = obj.value , data = obj.data , did = obj.id , field = obj.field; //得到字段 $.ajax({ type: \"post\", url: \"/cms/content/quickEdit\", data: { 'field': field, 'value': value, 'did': did, 'row': data, }, dataType: \"json\", success: function (msg) { if (msg.status) { layer.msg(msg.msg, {icon: 1, time: 1500}); table.reload('tableReload'); layer.close(index); } else { layer.alert(msg.msg, {icon: 2}, function () { layer.close(index); }); } } }); return false; layer.msg('[ID: ' + data.id + '] ' + field + ' 字段更改为：' + value); }); form.on('submit(zq_submit)', function (data) { var formData = data.field; $.ajax({ type: \"post\", url: \"/cms/content/add\", data: formData, dataType: \"json\", success: function (msg) { if (msg.status) { layer.msg(msg.msg, {icon: 1, time: 1500}); table.reload('tableReload'); layer.close(index); } else { layer.alert(msg.msg, {icon: 2}, function () { layer.close(index); }); } } }); return false; }); table.on('rowDouble(zq_table)', function (obj) { var data = obj.data; layer.open({ type: 2, title: '查看', maxmin: true, shadeClose: true, area: ['1200px', '900px'], content: '/cms/content/detail?id=' + data.id }); obj.tr.addClass('layui-table-click').siblings().removeClass('layui-table-click'); }); form.on('submit(zq_edit_submit)', function (data) { var formData = data.field; $.ajax({ type: \"post\", url: \"/cms/content/edit\", data: formData, dataType: \"json\", success: function (msg) { if (msg.status) { layer.msg(msg.msg, {icon: 1, time: 1500}); table.reload('tableReload'); layer.close(index); } else { layer.alert(msg.msg, {icon: 2}, function () { layer.close(index); }); } } }); return false; }); form.on('submit(search)', function (data) { var formData = data.field; table.reload('tableReload', { page: { curr: 1 } , where: formData , url: '/cms/content/page' , method: 'post' }); return false; }); }); }); var index; //表单弹出层 function zq_edit_form(title, url, w, h) { if (title == null || title == '') { title = false; } ; if (url == null || url == '') { } ;// url=\"404.html\"; if (w == null || w == '') { w = ($(window).width() * 0.9); } ; if (h == null || h == '') { h = ($(window).height() - 50); } ; index = layer.open({ type: 1, title: title, area: [w + 'px', h + 'px'], fix: false, //不固定 maxmin: true, shadeClose: true, shade: 0.4,//背景灰度 content: $(\"#zq_edit_formpopbox\").html() }); } function zq_detail_form(title, url, w, h) { if (title == null || title == '') { title = false; } ; if (url == null || url == '') { } ;// url=\"404.html\"; if (w == null || w == '') { w = ($(window).width() * 0.9); } ; if (h == null || h == '') { h = ($(window).height() - 50); } ; index = layer.open({ type: 1, title: title, area: [w + 'px', h + 'px'], fix: false, //不固定 maxmin: true, shadeClose: true, shade: 0.4,//背景灰度 content: $(\"#zq_detail_formpopbox\").html() }); } function zq_form(title, url, w, h) { if (title == null || title == '') { title = false; } ; if (url == null || url == '') { } ;// url=\"404.html\"; if (w == null || w == '') { w = ($(window).width() * 0.9); } ; if (h == null || h == '') { h = ($(window).height() - 50); } ; index = layer.open({ type: 1, title: title, area: [w + 'px', h + 'px'], fix: false, //不固定 maxmin: true, shadeClose: true, shade: 0.4,//背景灰度 content: $(\"#zq_formpopbox\").html(), yes: function (index, layero) { // uploadInst.reload(); } }); } 做完以上两部后访问控制器你可以看到一个空白的页面 9.现在我们来实现读写查询的 action 函数 1.打开刚才创建的控制器类生成以下函数 app\\code\\Cms\\Controller\\Content.php setView()->addTemplate( array( \"blockName\" => \"Cms.Common\", \"templatePath\" => \"Cms/View/Content/index\", ) )->setLayout()->toHtml(); } public function page() { parent::page(); // TODO: Change the autogenerated stub } public function edit() { parent::edit(); // TODO: Change the autogenerated stub } public function del() { parent::del(); // TODO: Change the autogenerated stub } public function detail() { parent::detail(); // TODO: Change the autogenerated stub } public function quickEdit() { parent::quickEdit(); // TODO: Change the autogenerated stub } } 2 现在我们开始来写翻页方法 public function page() { $filter = $this->post(); $query = Db::table($this->model->table)->field($this->model->field); if (isset($filter['status']) && $filter['status'] != '') { $query->where('status', '=', $filter['status']); } if (isset($filter['title']) && $filter['title'] != '') { $query->where('title', 'like', '%' . $filter['title'] . '%'); } if (isset($filter['description']) && $filter['description'] != '') { $query->where('description', 'like', '%' . $filter['description'] . '%'); } $count = $query->count(); $list = $query->page($this->getPage(), $this->getLimit())->order('id', 'desc')->select(); foreach ($list as &$item) { $item['created'] = $item['created'] >= 1 ? date(\"Y-m-d H:i:s\", $item['created']) : \"\"; $item['updated'] = $item['updated'] >= 1 ? date(\"Y-m-d H:i:s\", $item['updated']) : \"\"; $item['status_name'] = Help::getArrayValue(\\Weicot\\Cms\\Model\\Content::$status, $item['status']); } $this->success('分页数据', 1111, [ 'count' => $count, 'list' => $list ]); } 3.我们现在开始来写添加方法 /*** * 添加函数 */ public function add() { $data = $this->post(); if (!empty($data)) { if (isset($data['title']) && isset($data['description']) && !empty($data['title'])) { $save = Help::getFormatArrayData($data, $this->model->field, false); $save['created'] = time(); $save['updated'] = time(); Db::table($this->model->table)->insert($save); $id = Db::getLastInsID(); if ($id) { $this->success('添加成功', 1111, ['id' => $id]); } $this->error('添加失败'); } } $this->error('提交数据不全'); } 做完这一步之后你可以尝试添加一次数据 添加成功后刷新页面 就可以看到您刚才添加的数据啦 现在我们写完了数据添加以及显示的 action 做编辑和删除的 action 啦 继续在我们当前的控制器文件 写入以下代码 4.增加编辑方法 /*** * 编辑函数 */ public function edit() { $data = $this->post(); if (!empty($data)) { if (isset($data['id']) && isset($data['title']) && !empty($data['title']) && !empty($data['id'])) { $save = Help::getFormatArrayData($data, $this->model->field, false); $id = $save['id']; unset($save['id']); $save['updated'] = time(); if (Db::table($this->model->table)->where('id', '=', $id)->update($save)) { $this->success('修改成功', 1111, ['id' => $id]); }; $this->error('修改失败'); } } $this->error('提交数据不全'); } 然后是增加删除的方法 /*** * 删除 * @throws \\think\\Exception * @throws \\think\\db\\exception\\PDOException */ function del() { $id = $this->post('id'); if ($id) { $status = Db::table($this->model->table) ->where('id', '=', $id) ->delete(); if ($status) { $this->success('删除成功', 1111); }; } $this->error('删除失败'); } 自此一个读写查询模块就完成啦 10 如何禁止未经登录的访问 基础权限控制 app\\code\\Base\\Model\\AccessControl.php [ \"customer/login/index\", \"customer/login/create\", \"customer/action/login\", \"customer/action/create\", \"customer/action/ajaxLogin\", \"customer/action/ajaxCreate\" ], \"base\" => [ \"base/home/captcha\", \"base/home/captchalogin\", \"base/home/about\", \"base/home/execute\", \"base/home/serviceClause\", \"base/home/copyrightStatement\" ], ]; } } 2 或者通过控制器 $noNeedLogin=[] 的方式进行设置 方法为 $noNeedLogin=['action1','action2'] 11 快速指导 1.App Name/Controller Name/Function Name //路由 方法 2.http://www.weicot.com/base/index/home //访问路径 3.namespace Weicot\\Base\\Controller\\Index::home; //调用方法 4.如果控制器不存在action 则执行默认的 execute 控制，其中默认的index最后也会被定向到execute函数 5.注意在模块中 Class Name =File Nmae 类名=文件名 6.namespace Weicot\\Base\\View //视图基类 7.namespace Weicot\\Base\\View //基类 将模板压入数组 $this->template[] = array( //可同时设置多个模板 \"blockName\" => \"Base.Header\", //Weicot/Base/Block \"templatePath\" => \"Base/View/Header\", // Base/View/Header.phtml ); 8.二级调用 \"blockName\" => \"Base.Header.Function.Value\", Weicot/Base/Block::Header->Function(Value) 9.View 可以在模板文件中以块级单位调用 使用 View 中的 createBlock 进行创建 12 涉及的开源项目 前端主要使用的开源项目 layui layui layui 文档 后端经常使用的ORM thinkphp-5 orm think-orm think-orm 文档 WeiCot Framework 作者官网 weicot.com "},"框架的前端模板开发和切换.html":{"url":"框架的前端模板开发和切换.html","title":"框架的前端模板开发和切换","keywords":"","body":"默认模板路径 app/code//View 完整的路径 app/code/Cms/Viewhtml模板以xxx.phtml结尾，及其他静态文件。 我可以将所有模块下的View 目录文件可以进行迁移到 skin/frontend/template 目录下面只要将配置 app/etc/Config.php 文件中的 template dir 改为 skin/frontend/template 然后运行迁移工具即可同时系统支持后台模板以及样式切换 'template' => [ 'dir' => \"app/code/\" //模板路径默认路径 app / code / 前后端分离的路径 skin / frontend / template ], 单独渲染模板 get(\"id\"); if ($id) { $dataInfo = $template->getUserTemplateById($id); if (!empty($dataInfo)) { $tplData = $dataInfo[0]; $tplData['country_options'] = $this->getCountry($tplData['country']); $tplData['type_options'] = $this->getTemplateType($tplData['type']); $content = View::render([ 'data' => $tplData, \"template\" => 'Export/View/Template/info', \"output\" => false ]); return $content; } } return '没有找到模板'; } "},"一些Class和Function说明.html":{"url":"一些Class和Function说明.html","title":"一些Class和Function说明","keywords":"","body":"一些Class和Function说明 WeiCot Framework 快速开发教程 -www.weicot.com Run::routeDetails() 获取路由详情 \\Weicot\\Core\\Run::routeDetails() array(6) { [\"app\"]=> string(3) \"cms\" //应用/模块 名称 [\"controller\"]=> // 控制器名称 string(7) \"content\" [\"class\"]=> //控制类名 string(29) \"Weicot\\Cms\\Controller\\Content\" [\"action\"]=> string(12) \"page\" //action 方法名 [\"path\"]=> string(24) \"cms/content/page\" //路由路径 [\"route\"]=> string(24) \"cms/content/page\" //路由 } Db::table ; tp-orm \\think\\Db $query = Db::table($this->model->table)->field($this->model->field); Help \\Weicot\\Base\\Model\\Help; 各种辅助工具的集合 __config($key = '', $value = '') app/etc/Config.php; 获取配置文件的数据 通过 __config($key = '', $value = '') 获取 全局有效 Config::get($key, $default = null) app\\code\\System\\Model\\Config.php 获取System 数据库中的配置文件 通过 Config::get($key, $default = null) 获取 全局有效 "}}